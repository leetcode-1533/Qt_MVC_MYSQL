#-------------------------------------------------
#
# Project created by QtCreator 2013-11-25T22:05:28
#
#-------------------------------------------------

QT       += core gui
QT       +=sql

TARGET = FinalTerm
TEMPLATE = app


SOURCES += main.cpp\
        mainwindow.cpp \
    mysql_establish.cpp \
    w_login.cpp \
    sql_professor.cpp \
    privilege.cpp \
    pform.cpp \
    yingqlineedit.cpp \
    submit_dia.cpp \
    news.cpp

HEADERS  += mainwindow.h \
    mysql_establish.h \
    w_login.h \
    sql_professor.h \
    privilege.h \
    pform.h \
    yingqlineedit.h \
    submit_dia.h \
    news.h

FORMS    += mainwindow.ui \
    w_login.ui \
    pform.ui \
    submit_dia.ui \
    news.ui
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE QtCreatorProject>
<!-- Written by Qt Creator 2.4.1, 2013-12-22T21:18:55. -->
<qtcreator>
 <data>
  <variable>ProjectExplorer.Project.ActiveTarget</variable>
  <value type="int">0</value>
 </data>
 <data>
  <variable>ProjectExplorer.Project.EditorSettings</variable>
  <valuemap type="QVariantMap">
   <value type="bool" key="EditorConfiguration.AutoIndent">true</value>
   <value type="bool" key="EditorConfiguration.AutoSpacesForTabs">false</value>
   <valuemap type="QVariantMap" key="EditorConfiguration.CodeStyle.0">
    <value type="QString" key="language">Cpp</value>
    <valuemap type="QVariantMap" key="value">
     <value type="QString" key="CurrentPreferences">CppGlobal</value>
    </valuemap>
   </valuemap>
   <valuemap type="QVariantMap" key="EditorConfiguration.CodeStyle.1">
    <value type="QString" key="language">QmlJS</value>
    <valuemap type="QVariantMap" key="value">
     <value type="QString" key="CurrentPreferences">QmlJSGlobal</value>
    </valuemap>
   </valuemap>
   <value type="int" key="EditorConfiguration.CodeStyle.Count">2</value>
   <value type="QByteArray" key="EditorConfiguration.Codec">System</value>
   <value type="bool" key="EditorConfiguration.ConstrainTooltips">false</value>
   <value type="int" key="EditorConfiguration.IndentSize">4</value>
   <value type="bool" key="EditorConfiguration.MouseNavigation">true</value>
   <value type="int" key="EditorConfiguration.PaddingMode">1</value>
   <value type="bool" key="EditorConfiguration.ScrollWheelZooming">true</value>
   <value type="int" key="EditorConfiguration.SmartBackspaceBehavior">0</value>
   <value type="bool" key="EditorConfiguration.SpacesForTabs">true</value>
   <value type="int" key="EditorConfiguration.TabKeyBehavior">0</value>
   <value type="int" key="EditorConfiguration.TabSize">8</value>
   <value type="bool" key="EditorConfiguration.UseGlobal">true</value>
   <value type="int" key="EditorConfiguration.Utf8BomBehavior">1</value>
   <value type="bool" key="EditorConfiguration.addFinalNewLine">true</value>
   <value type="bool" key="EditorConfiguration.cleanIndentation">true</value>
   <value type="bool" key="EditorConfiguration.cleanWhitespace">true</value>
   <value type="bool" key="EditorConfiguration.inEntireDocument">false</value>
  </valuemap>
 </data>
 <data>
  <variable>ProjectExplorer.Project.PluginSettings</variable>
  <valuemap type="QVariantMap"/>
 </data>
 <data>
  <variable>ProjectExplorer.Project.Target.0</variable>
  <valuemap type="QVariantMap">
   <value type="QString" key="ProjectExplorer.ProjectConfiguration.DefaultDisplayName">Desktop</value>
   <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName">Desktop</value>
   <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">Qt4ProjectManager.Target.DesktopTarget</value>
   <value type="int" key="ProjectExplorer.Target.ActiveBuildConfiguration">0</value>
   <value type="int" key="ProjectExplorer.Target.ActiveDeployConfiguration">0</value>
   <value type="int" key="ProjectExplorer.Target.ActiveRunConfiguration">0</value>
   <valuemap type="QVariantMap" key="ProjectExplorer.Target.BuildConfiguration.0">
    <value type="QString" key="ProjectExplorer.BuildCOnfiguration.ToolChain">ProjectExplorer.ToolChain.Gcc:/usr/bin/g++.x86-linux-generic-elf-32bit./usr/bin/gdb</value>
    <valuemap type="QVariantMap" key="ProjectExplorer.BuildConfiguration.BuildStepList.0">
     <valuemap type="QVariantMap" key="ProjectExplorer.BuildStepList.Step.0">
      <value type="QString" key="ProjectExplorer.ProjectConfiguration.DefaultDisplayName">qmake</value>
      <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName"></value>
      <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">QtProjectManager.QMakeBuildStep</value>
      <value type="bool" key="QtProjectManager.QMakeBuildStep.LinkQmlDebuggingLibrary">false</value>
      <value type="bool" key="QtProjectManager.QMakeBuildStep.LinkQmlDebuggingLibraryAuto">true</value>
      <value type="QString" key="QtProjectManager.QMakeBuildStep.QMakeArguments"></value>
      <value type="bool" key="QtProjectManager.QMakeBuildStep.QMakeForced">false</value>
     </valuemap>
     <valuemap type="QVariantMap" key="ProjectExplorer.BuildStepList.Step.1">
      <value type="QString" key="ProjectExplorer.ProjectConfiguration.DefaultDisplayName">Make</value>
      <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName"></value>
      <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">Qt4ProjectManager.MakeStep</value>
      <value type="bool" key="Qt4ProjectManager.MakeStep.Clean">false</value>
      <value type="QString" key="Qt4ProjectManager.MakeStep.MakeArguments"></value>
      <value type="QString" key="Qt4ProjectManager.MakeStep.MakeCommand"></value>
     </valuemap>
     <value type="int" key="ProjectExplorer.BuildStepList.StepsCount">2</value>
     <value type="QString" key="ProjectExplorer.ProjectConfiguration.DefaultDisplayName">Build</value>
     <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName"></value>
     <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">ProjectExplorer.BuildSteps.Build</value>
    </valuemap>
    <valuemap type="QVariantMap" key="ProjectExplorer.BuildConfiguration.BuildStepList.1">
     <valuemap type="QVariantMap" key="ProjectExplorer.BuildStepList.Step.0">
      <value type="QString" key="ProjectExplorer.ProjectConfiguration.DefaultDisplayName">Make</value>
      <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName"></value>
      <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">Qt4ProjectManager.MakeStep</value>
      <value type="bool" key="Qt4ProjectManager.MakeStep.Clean">true</value>
      <value type="QString" key="Qt4ProjectManager.MakeStep.MakeArguments">clean</value>
      <value type="QString" key="Qt4ProjectManager.MakeStep.MakeCommand"></value>
     </valuemap>
     <value type="int" key="ProjectExplorer.BuildStepList.StepsCount">1</value>
     <value type="QString" key="ProjectExplorer.ProjectConfiguration.DefaultDisplayName">Clean</value>
     <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName"></value>
     <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">ProjectExplorer.BuildSteps.Clean</value>
    </valuemap>
    <value type="int" key="ProjectExplorer.BuildConfiguration.BuildStepListCount">2</value>
    <value type="bool" key="ProjectExplorer.BuildConfiguration.ClearSystemEnvironment">false</value>
    <valuelist type="QVariantList" key="ProjectExplorer.BuildConfiguration.UserEnvironmentChanges"/>
    <value type="QString" key="ProjectExplorer.ProjectConfiguration.DefaultDisplayName">Qt 4.8.1 in PATH (System) Release</value>
    <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName"></value>
    <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">Qt4ProjectManager.Qt4BuildConfiguration</value>
    <value type="int" key="Qt4ProjectManager.Qt4BuildConfiguration.BuildConfiguration">0</value>
    <value type="QString" key="Qt4ProjectManager.Qt4BuildConfiguration.BuildDirectory">/home/y1275963/FinalTerm-build-desktop-Qt_4_8_1_in_PATH__System__Release</value>
    <value type="int" key="Qt4ProjectManager.Qt4BuildConfiguration.QtVersionId">1</value>
    <value type="bool" key="Qt4ProjectManager.Qt4BuildConfiguration.UseShadowBuild">true</value>
   </valuemap>
   <valuemap type="QVariantMap" key="ProjectExplorer.Target.BuildConfiguration.1">
    <value type="QString" key="ProjectExplorer.BuildCOnfiguration.ToolChain">ProjectExplorer.ToolChain.Gcc:/usr/bin/g++.x86-linux-generic-elf-32bit./usr/bin/gdb</value>
    <valuemap type="QVariantMap" key="ProjectExplorer.BuildConfiguration.BuildStepList.0">
     <valuemap type="QVariantMap" key="ProjectExplorer.BuildStepList.Step.0">
      <value type="QString" key="ProjectExplorer.ProjectConfiguration.DefaultDisplayName">qmake</value>
      <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName"></value>
      <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">QtProjectManager.QMakeBuildStep</value>
      <value type="bool" key="QtProjectManager.QMakeBuildStep.LinkQmlDebuggingLibrary">false</value>
      <value type="bool" key="QtProjectManager.QMakeBuildStep.LinkQmlDebuggingLibraryAuto">true</value>
      <value type="QString" key="QtProjectManager.QMakeBuildStep.QMakeArguments"></value>
      <value type="bool" key="QtProjectManager.QMakeBuildStep.QMakeForced">false</value>
     </valuemap>
     <valuemap type="QVariantMap" key="ProjectExplorer.BuildStepList.Step.1">
      <value type="QString" key="ProjectExplorer.ProjectConfiguration.DefaultDisplayName">Make</value>
      <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName"></value>
      <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">Qt4ProjectManager.MakeStep</value>
      <value type="bool" key="Qt4ProjectManager.MakeStep.Clean">false</value>
      <value type="QString" key="Qt4ProjectManager.MakeStep.MakeArguments"></value>
      <value type="QString" key="Qt4ProjectManager.MakeStep.MakeCommand"></value>
     </valuemap>
     <value type="int" key="ProjectExplorer.BuildStepList.StepsCount">2</value>
     <value type="QString" key="ProjectExplorer.ProjectConfiguration.DefaultDisplayName">Build</value>
     <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName"></value>
     <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">ProjectExplorer.BuildSteps.Build</value>
    </valuemap>
    <valuemap type="QVariantMap" key="ProjectExplorer.BuildConfiguration.BuildStepList.1">
     <valuemap type="QVariantMap" key="ProjectExplorer.BuildStepList.Step.0">
      <value type="QString" key="ProjectExplorer.ProjectConfiguration.DefaultDisplayName">Make</value>
      <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName"></value>
      <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">Qt4ProjectManager.MakeStep</value>
      <value type="bool" key="Qt4ProjectManager.MakeStep.Clean">true</value>
      <value type="QString" key="Qt4ProjectManager.MakeStep.MakeArguments">clean</value>
      <value type="QString" key="Qt4ProjectManager.MakeStep.MakeCommand"></value>
     </valuemap>
     <value type="int" key="ProjectExplorer.BuildStepList.StepsCount">1</value>
     <value type="QString" key="ProjectExplorer.ProjectConfiguration.DefaultDisplayName">Clean</value>
     <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName"></value>
     <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">ProjectExplorer.BuildSteps.Clean</value>
    </valuemap>
    <value type="int" key="ProjectExplorer.BuildConfiguration.BuildStepListCount">2</value>
    <value type="bool" key="ProjectExplorer.BuildConfiguration.ClearSystemEnvironment">false</value>
    <valuelist type="QVariantList" key="ProjectExplorer.BuildConfiguration.UserEnvironmentChanges"/>
    <value type="QString" key="ProjectExplorer.ProjectConfiguration.DefaultDisplayName">Qt 4.8.1 in PATH (System) Debug</value>
    <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName"></value>
    <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">Qt4ProjectManager.Qt4BuildConfiguration</value>
    <value type="int" key="Qt4ProjectManager.Qt4BuildConfiguration.BuildConfiguration">2</value>
    <value type="QString" key="Qt4ProjectManager.Qt4BuildConfiguration.BuildDirectory">/home/y1275963/FinalTerm-build-desktop-Qt_4_8_1_in_PATH__System__Debug</value>
    <value type="int" key="Qt4ProjectManager.Qt4BuildConfiguration.QtVersionId">1</value>
    <value type="bool" key="Qt4ProjectManager.Qt4BuildConfiguration.UseShadowBuild">true</value>
   </valuemap>
   <value type="int" key="ProjectExplorer.Target.BuildConfigurationCount">2</value>
   <valuemap type="QVariantMap" key="ProjectExplorer.Target.DeployConfiguration.0">
    <valuemap type="QVariantMap" key="ProjectExplorer.BuildConfiguration.BuildStepList.0">
     <value type="int" key="ProjectExplorer.BuildStepList.StepsCount">0</value>
     <value type="QString" key="ProjectExplorer.ProjectConfiguration.DefaultDisplayName">Deploy</value>
     <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName"></value>
     <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">ProjectExplorer.BuildSteps.Deploy</value>
    </valuemap>
    <value type="int" key="ProjectExplorer.BuildConfiguration.BuildStepListCount">1</value>
    <value type="QString" key="ProjectExplorer.ProjectConfiguration.DefaultDisplayName">No deployment</value>
    <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName"></value>
    <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">ProjectExplorer.DefaultDeployConfiguration</value>
   </valuemap>
   <value type="int" key="ProjectExplorer.Target.DeployConfigurationCount">1</value>
   <valuemap type="QVariantMap" key="ProjectExplorer.Target.RunConfiguration.0">
    <value type="bool" key="Analyzer.Project.UseGlobal">true</value>
    <value type="bool" key="Analyzer.Project.UseGlobal">true</value>
    <valuelist type="QVariantList" key="Analyzer.Valgrind.AddedSuppressionFiles"/>
    <valuelist type="QVariantList" key="Analyzer.Valgrind.AddedSuppressionFiles"/>
    <value type="bool" key="Analyzer.Valgrind.Callgrind.CollectBusEvents">false</value>
    <value type="bool" key="Analyzer.Valgrind.Callgrind.CollectBusEvents">false</value>
    <value type="bool" key="Analyzer.Valgrind.Callgrind.CollectSystime">false</value>
    <value type="bool" key="Analyzer.Valgrind.Callgrind.CollectSystime">false</value>
    <value type="bool" key="Analyzer.Valgrind.Callgrind.EnableBranchSim">false</value>
    <value type="bool" key="Analyzer.Valgrind.Callgrind.EnableBranchSim">false</value>
    <value type="bool" key="Analyzer.Valgrind.Callgrind.EnableCacheSim">false</value>
    <value type="bool" key="Analyzer.Valgrind.Callgrind.EnableCacheSim">false</value>
    <value type="bool" key="Analyzer.Valgrind.Callgrind.EnableEventToolTips">true</value>
    <value type="bool" key="Analyzer.Valgrind.Callgrind.EnableEventToolTips">true</value>
    <value type="double" key="Analyzer.Valgrind.Callgrind.MinimumCostRatio">0.01</value>
    <value type="double" key="Analyzer.Valgrind.Callgrind.MinimumCostRatio">0.01</value>
    <value type="double" key="Analyzer.Valgrind.Callgrind.VisualisationMinimumCostRatio">10</value>
    <value type="double" key="Analyzer.Valgrind.Callgrind.VisualisationMinimumCostRatio">10</value>
    <value type="bool" key="Analyzer.Valgrind.FilterExternalIssues">true</value>
    <value type="bool" key="Analyzer.Valgrind.FilterExternalIssues">true</value>
    <value type="int" key="Analyzer.Valgrind.NumCallers">25</value>
    <value type="int" key="Analyzer.Valgrind.NumCallers">25</value>
    <valuelist type="QVariantList" key="Analyzer.Valgrind.RemovedSuppressionFiles"/>
    <valuelist type="QVariantList" key="Analyzer.Valgrind.RemovedSuppressionFiles"/>
    <value type="bool" key="Analyzer.Valgrind.TrackOrigins">true</value>
    <value type="bool" key="Analyzer.Valgrind.TrackOrigins">true</value>
    <value type="QString" key="Analyzer.Valgrind.ValgrindExecutable">valgrind</value>
    <value type="QString" key="Analyzer.Valgrind.ValgrindExecutable">valgrind</value>
    <valuelist type="QVariantList" key="Analyzer.Valgrind.VisibleErrorKinds">
     <value type="int">0</value>
     <value type="int">1</value>
     <value type="int">2</value>
     <value type="int">3</value>
     <value type="int">4</value>
     <value type="int">5</value>
     <value type="int">6</value>
     <value type="int">7</value>
     <value type="int">8</value>
     <value type="int">9</value>
     <value type="int">10</value>
     <value type="int">11</value>
     <value type="int">12</value>
     <value type="int">13</value>
     <value type="int">14</value>
    </valuelist>
    <valuelist type="QVariantList" key="Analyzer.Valgrind.VisibleErrorKinds">
     <value type="int">0</value>
     <value type="int">1</value>
     <value type="int">2</value>
     <value type="int">3</value>
     <value type="int">4</value>
     <value type="int">5</value>
     <value type="int">6</value>
     <value type="int">7</value>
     <value type="int">8</value>
     <value type="int">9</value>
     <value type="int">10</value>
     <value type="int">11</value>
     <value type="int">12</value>
     <value type="int">13</value>
     <value type="int">14</value>
    </valuelist>
    <value type="QString" key="ProjectExplorer.ProjectConfiguration.DefaultDisplayName">FinalTerm</value>
    <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName"></value>
    <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">Qt4ProjectManager.Qt4RunConfiguration</value>
    <value type="int" key="Qt4ProjectManager.Qt4RunConfiguration.BaseEnvironmentBase">2</value>
    <value type="QString" key="Qt4ProjectManager.Qt4RunConfiguration.CommandLineArguments"></value>
    <value type="QString" key="Qt4ProjectManager.Qt4RunConfiguration.ProFile">FinalTerm.pro</value>
    <value type="bool" key="Qt4ProjectManager.Qt4RunConfiguration.UseDyldImageSuffix">false</value>
    <value type="bool" key="Qt4ProjectManager.Qt4RunConfiguration.UseTerminal">false</value>
    <valuelist type="QVariantList" key="Qt4ProjectManager.Qt4RunConfiguration.UserEnvironmentChanges"/>
    <value type="QString" key="Qt4ProjectManager.Qt4RunConfiguration.UserWorkingDirectory"></value>
    <value type="uint" key="RunConfiguration.QmlDebugServerPort">3768</value>
    <value type="bool" key="RunConfiguration.UseCppDebugger">true</value>
    <value type="bool" key="RunConfiguration.UseQmlDebugger">false</value>
    <value type="bool" key="RunConfiguration.UseQmlDebuggerAuto">false</value>
   </valuemap>
   <value type="int" key="ProjectExplorer.Target.RunConfigurationCount">1</value>
  </valuemap>
 </data>
 <data>
  <variable>ProjectExplorer.Project.TargetCount</variable>
  <value type="int">1</value>
 </data>
 <data>
  <variable>ProjectExplorer.Project.Updater.EnvironmentId</variable>
  <value type="QString">{7c0785b9-fe93-4db5-89cb-0b1182acef47}</value>
 </data>
 <data>
  <variable>ProjectExplorer.Project.Updater.FileVersion</variable>
  <value type="int">10</value>
 </data>
</qtcreator>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE QtCreatorProject>
<<<<<<< HEAD
<!-- Written by Qt Creator 2.4.1, 2013-12-20T09:42:41. -->
=======
<!-- Written by Qt Creator 2.4.1, 2013-12-20T09:34:28. -->
>>>>>>> master
<qtcreator>
 <data>
  <variable>ProjectExplorer.Project.ActiveTarget</variable>
  <value type="int">0</value>
 </data>
 <data>
  <variable>ProjectExplorer.Project.EditorSettings</variable>
  <valuemap type="QVariantMap">
   <value type="bool" key="EditorConfiguration.AutoIndent">true</value>
   <value type="bool" key="EditorConfiguration.AutoSpacesForTabs">false</value>
   <valuemap type="QVariantMap" key="EditorConfiguration.CodeStyle.0">
    <value type="QString" key="language">Cpp</value>
    <valuemap type="QVariantMap" key="value">
     <value type="QString" key="CurrentPreferences">CppGlobal</value>
    </valuemap>
   </valuemap>
   <valuemap type="QVariantMap" key="EditorConfiguration.CodeStyle.1">
    <value type="QString" key="language">QmlJS</value>
    <valuemap type="QVariantMap" key="value">
     <value type="QString" key="CurrentPreferences">QmlJSGlobal</value>
    </valuemap>
   </valuemap>
   <value type="int" key="EditorConfiguration.CodeStyle.Count">2</value>
   <value type="QByteArray" key="EditorConfiguration.Codec">System</value>
   <value type="bool" key="EditorConfiguration.ConstrainTooltips">false</value>
   <value type="int" key="EditorConfiguration.IndentSize">4</value>
   <value type="bool" key="EditorConfiguration.MouseNavigation">true</value>
   <value type="int" key="EditorConfiguration.PaddingMode">1</value>
   <value type="bool" key="EditorConfiguration.ScrollWheelZooming">true</value>
   <value type="int" key="EditorConfiguration.SmartBackspaceBehavior">0</value>
   <value type="bool" key="EditorConfiguration.SpacesForTabs">true</value>
   <value type="int" key="EditorConfiguration.TabKeyBehavior">0</value>
   <value type="int" key="EditorConfiguration.TabSize">8</value>
   <value type="bool" key="EditorConfiguration.UseGlobal">true</value>
   <value type="int" key="EditorConfiguration.Utf8BomBehavior">1</value>
   <value type="bool" key="EditorConfiguration.addFinalNewLine">true</value>
   <value type="bool" key="EditorConfiguration.cleanIndentation">true</value>
   <value type="bool" key="EditorConfiguration.cleanWhitespace">true</value>
   <value type="bool" key="EditorConfiguration.inEntireDocument">false</value>
  </valuemap>
 </data>
 <data>
  <variable>ProjectExplorer.Project.PluginSettings</variable>
  <valuemap type="QVariantMap"/>
 </data>
 <data>
  <variable>ProjectExplorer.Project.Target.0</variable>
  <valuemap type="QVariantMap">
   <value type="QString" key="ProjectExplorer.ProjectConfiguration.DefaultDisplayName">Desktop</value>
   <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName">Desktop</value>
   <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">Qt4ProjectManager.Target.DesktopTarget</value>
   <value type="int" key="ProjectExplorer.Target.ActiveBuildConfiguration">1</value>
   <value type="int" key="ProjectExplorer.Target.ActiveDeployConfiguration">0</value>
   <value type="int" key="ProjectExplorer.Target.ActiveRunConfiguration">0</value>
   <valuemap type="QVariantMap" key="ProjectExplorer.Target.BuildConfiguration.0">
    <value type="QString" key="ProjectExplorer.BuildCOnfiguration.ToolChain">ProjectExplorer.ToolChain.Gcc:/usr/bin/g++.x86-linux-generic-elf-32bit./usr/bin/gdb</value>
    <valuemap type="QVariantMap" key="ProjectExplorer.BuildConfiguration.BuildStepList.0">
     <valuemap type="QVariantMap" key="ProjectExplorer.BuildStepList.Step.0">
      <value type="QString" key="ProjectExplorer.ProjectConfiguration.DefaultDisplayName">qmake</value>
      <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName"></value>
      <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">QtProjectManager.QMakeBuildStep</value>
      <value type="bool" key="QtProjectManager.QMakeBuildStep.LinkQmlDebuggingLibrary">false</value>
      <value type="bool" key="QtProjectManager.QMakeBuildStep.LinkQmlDebuggingLibraryAuto">true</value>
      <value type="QString" key="QtProjectManager.QMakeBuildStep.QMakeArguments"></value>
      <value type="bool" key="QtProjectManager.QMakeBuildStep.QMakeForced">false</value>
     </valuemap>
     <valuemap type="QVariantMap" key="ProjectExplorer.BuildStepList.Step.1">
      <value type="QString" key="ProjectExplorer.ProjectConfiguration.DefaultDisplayName">Make</value>
      <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName"></value>
      <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">Qt4ProjectManager.MakeStep</value>
      <value type="bool" key="Qt4ProjectManager.MakeStep.Clean">false</value>
      <value type="QString" key="Qt4ProjectManager.MakeStep.MakeArguments"></value>
      <value type="QString" key="Qt4ProjectManager.MakeStep.MakeCommand"></value>
     </valuemap>
     <value type="int" key="ProjectExplorer.BuildStepList.StepsCount">2</value>
     <value type="QString" key="ProjectExplorer.ProjectConfiguration.DefaultDisplayName">Build</value>
     <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName"></value>
     <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">ProjectExplorer.BuildSteps.Build</value>
    </valuemap>
    <valuemap type="QVariantMap" key="ProjectExplorer.BuildConfiguration.BuildStepList.1">
     <valuemap type="QVariantMap" key="ProjectExplorer.BuildStepList.Step.0">
      <value type="QString" key="ProjectExplorer.ProjectConfiguration.DefaultDisplayName">Make</value>
      <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName"></value>
      <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">Qt4ProjectManager.MakeStep</value>
      <value type="bool" key="Qt4ProjectManager.MakeStep.Clean">true</value>
      <value type="QString" key="Qt4ProjectManager.MakeStep.MakeArguments">clean</value>
      <value type="QString" key="Qt4ProjectManager.MakeStep.MakeCommand"></value>
     </valuemap>
     <value type="int" key="ProjectExplorer.BuildStepList.StepsCount">1</value>
     <value type="QString" key="ProjectExplorer.ProjectConfiguration.DefaultDisplayName">Clean</value>
     <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName"></value>
     <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">ProjectExplorer.BuildSteps.Clean</value>
    </valuemap>
    <value type="int" key="ProjectExplorer.BuildConfiguration.BuildStepListCount">2</value>
    <value type="bool" key="ProjectExplorer.BuildConfiguration.ClearSystemEnvironment">false</value>
    <valuelist type="QVariantList" key="ProjectExplorer.BuildConfiguration.UserEnvironmentChanges"/>
    <value type="QString" key="ProjectExplorer.ProjectConfiguration.DefaultDisplayName">Qt 4.8.1 in PATH (System) Release</value>
    <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName"></value>
    <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">Qt4ProjectManager.Qt4BuildConfiguration</value>
    <value type="int" key="Qt4ProjectManager.Qt4BuildConfiguration.BuildConfiguration">0</value>
    <value type="QString" key="Qt4ProjectManager.Qt4BuildConfiguration.BuildDirectory">/home/y1275963/sql/FinalTerm-build-desktop-Qt_4_8_1_in_PATH__System__Release</value>
    <value type="int" key="Qt4ProjectManager.Qt4BuildConfiguration.QtVersionId">1</value>
    <value type="bool" key="Qt4ProjectManager.Qt4BuildConfiguration.UseShadowBuild">true</value>
   </valuemap>
   <valuemap type="QVariantMap" key="ProjectExplorer.Target.BuildConfiguration.1">
    <value type="QString" key="ProjectExplorer.BuildCOnfiguration.ToolChain">ProjectExplorer.ToolChain.Gcc:/usr/bin/g++.x86-linux-generic-elf-32bit./usr/bin/gdb</value>
    <valuemap type="QVariantMap" key="ProjectExplorer.BuildConfiguration.BuildStepList.0">
     <valuemap type="QVariantMap" key="ProjectExplorer.BuildStepList.Step.0">
      <value type="QString" key="ProjectExplorer.ProjectConfiguration.DefaultDisplayName">qmake</value>
      <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName"></value>
      <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">QtProjectManager.QMakeBuildStep</value>
      <value type="bool" key="QtProjectManager.QMakeBuildStep.LinkQmlDebuggingLibrary">false</value>
      <value type="bool" key="QtProjectManager.QMakeBuildStep.LinkQmlDebuggingLibraryAuto">true</value>
      <value type="QString" key="QtProjectManager.QMakeBuildStep.QMakeArguments"></value>
      <value type="bool" key="QtProjectManager.QMakeBuildStep.QMakeForced">false</value>
     </valuemap>
     <valuemap type="QVariantMap" key="ProjectExplorer.BuildStepList.Step.1">
      <value type="QString" key="ProjectExplorer.ProjectConfiguration.DefaultDisplayName">Make</value>
      <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName"></value>
      <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">Qt4ProjectManager.MakeStep</value>
      <value type="bool" key="Qt4ProjectManager.MakeStep.Clean">false</value>
      <value type="QString" key="Qt4ProjectManager.MakeStep.MakeArguments"></value>
      <value type="QString" key="Qt4ProjectManager.MakeStep.MakeCommand"></value>
     </valuemap>
     <value type="int" key="ProjectExplorer.BuildStepList.StepsCount">2</value>
     <value type="QString" key="ProjectExplorer.ProjectConfiguration.DefaultDisplayName">Build</value>
     <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName"></value>
     <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">ProjectExplorer.BuildSteps.Build</value>
    </valuemap>
    <valuemap type="QVariantMap" key="ProjectExplorer.BuildConfiguration.BuildStepList.1">
     <valuemap type="QVariantMap" key="ProjectExplorer.BuildStepList.Step.0">
      <value type="QString" key="ProjectExplorer.ProjectConfiguration.DefaultDisplayName">Make</value>
      <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName"></value>
      <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">Qt4ProjectManager.MakeStep</value>
      <value type="bool" key="Qt4ProjectManager.MakeStep.Clean">true</value>
      <value type="QString" key="Qt4ProjectManager.MakeStep.MakeArguments">clean</value>
      <value type="QString" key="Qt4ProjectManager.MakeStep.MakeCommand"></value>
     </valuemap>
     <value type="int" key="ProjectExplorer.BuildStepList.StepsCount">1</value>
     <value type="QString" key="ProjectExplorer.ProjectConfiguration.DefaultDisplayName">Clean</value>
     <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName"></value>
     <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">ProjectExplorer.BuildSteps.Clean</value>
    </valuemap>
    <value type="int" key="ProjectExplorer.BuildConfiguration.BuildStepListCount">2</value>
    <value type="bool" key="ProjectExplorer.BuildConfiguration.ClearSystemEnvironment">false</value>
    <valuelist type="QVariantList" key="ProjectExplorer.BuildConfiguration.UserEnvironmentChanges"/>
    <value type="QString" key="ProjectExplorer.ProjectConfiguration.DefaultDisplayName">Qt 4.8.1 in PATH (System) Debug</value>
    <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName"></value>
    <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">Qt4ProjectManager.Qt4BuildConfiguration</value>
    <value type="int" key="Qt4ProjectManager.Qt4BuildConfiguration.BuildConfiguration">2</value>
    <value type="QString" key="Qt4ProjectManager.Qt4BuildConfiguration.BuildDirectory">/home/y1275963/sql/FinalTerm-build-desktop-Qt_4_8_1_in_PATH__System__Debug</value>
    <value type="int" key="Qt4ProjectManager.Qt4BuildConfiguration.QtVersionId">1</value>
    <value type="bool" key="Qt4ProjectManager.Qt4BuildConfiguration.UseShadowBuild">true</value>
   </valuemap>
   <value type="int" key="ProjectExplorer.Target.BuildConfigurationCount">2</value>
   <valuemap type="QVariantMap" key="ProjectExplorer.Target.DeployConfiguration.0">
    <valuemap type="QVariantMap" key="ProjectExplorer.BuildConfiguration.BuildStepList.0">
     <value type="int" key="ProjectExplorer.BuildStepList.StepsCount">0</value>
     <value type="QString" key="ProjectExplorer.ProjectConfiguration.DefaultDisplayName">Deploy</value>
     <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName"></value>
     <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">ProjectExplorer.BuildSteps.Deploy</value>
    </valuemap>
    <value type="int" key="ProjectExplorer.BuildConfiguration.BuildStepListCount">1</value>
    <value type="QString" key="ProjectExplorer.ProjectConfiguration.DefaultDisplayName">No deployment</value>
    <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName"></value>
    <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">ProjectExplorer.DefaultDeployConfiguration</value>
   </valuemap>
   <value type="int" key="ProjectExplorer.Target.DeployConfigurationCount">1</value>
   <valuemap type="QVariantMap" key="ProjectExplorer.Target.RunConfiguration.0">
    <value type="bool" key="Analyzer.Project.UseGlobal">true</value>
    <value type="bool" key="Analyzer.Project.UseGlobal">true</value>
    <valuelist type="QVariantList" key="Analyzer.Valgrind.AddedSuppressionFiles"/>
    <valuelist type="QVariantList" key="Analyzer.Valgrind.AddedSuppressionFiles"/>
    <value type="bool" key="Analyzer.Valgrind.Callgrind.CollectBusEvents">false</value>
    <value type="bool" key="Analyzer.Valgrind.Callgrind.CollectBusEvents">false</value>
    <value type="bool" key="Analyzer.Valgrind.Callgrind.CollectSystime">false</value>
    <value type="bool" key="Analyzer.Valgrind.Callgrind.CollectSystime">false</value>
    <value type="bool" key="Analyzer.Valgrind.Callgrind.EnableBranchSim">false</value>
    <value type="bool" key="Analyzer.Valgrind.Callgrind.EnableBranchSim">false</value>
    <value type="bool" key="Analyzer.Valgrind.Callgrind.EnableCacheSim">false</value>
    <value type="bool" key="Analyzer.Valgrind.Callgrind.EnableCacheSim">false</value>
    <value type="bool" key="Analyzer.Valgrind.Callgrind.EnableEventToolTips">true</value>
    <value type="bool" key="Analyzer.Valgrind.Callgrind.EnableEventToolTips">true</value>
    <value type="double" key="Analyzer.Valgrind.Callgrind.MinimumCostRatio">0.01</value>
    <value type="double" key="Analyzer.Valgrind.Callgrind.MinimumCostRatio">0.01</value>
    <value type="double" key="Analyzer.Valgrind.Callgrind.VisualisationMinimumCostRatio">10</value>
    <value type="double" key="Analyzer.Valgrind.Callgrind.VisualisationMinimumCostRatio">10</value>
    <value type="bool" key="Analyzer.Valgrind.FilterExternalIssues">true</value>
    <value type="bool" key="Analyzer.Valgrind.FilterExternalIssues">true</value>
    <value type="int" key="Analyzer.Valgrind.NumCallers">25</value>
    <value type="int" key="Analyzer.Valgrind.NumCallers">25</value>
    <valuelist type="QVariantList" key="Analyzer.Valgrind.RemovedSuppressionFiles"/>
    <valuelist type="QVariantList" key="Analyzer.Valgrind.RemovedSuppressionFiles"/>
    <value type="bool" key="Analyzer.Valgrind.TrackOrigins">true</value>
    <value type="bool" key="Analyzer.Valgrind.TrackOrigins">true</value>
    <value type="QString" key="Analyzer.Valgrind.ValgrindExecutable">valgrind</value>
    <value type="QString" key="Analyzer.Valgrind.ValgrindExecutable">valgrind</value>
    <valuelist type="QVariantList" key="Analyzer.Valgrind.VisibleErrorKinds">
     <value type="int">0</value>
     <value type="int">1</value>
     <value type="int">2</value>
     <value type="int">3</value>
     <value type="int">4</value>
     <value type="int">5</value>
     <value type="int">6</value>
     <value type="int">7</value>
     <value type="int">8</value>
     <value type="int">9</value>
     <value type="int">10</value>
     <value type="int">11</value>
     <value type="int">12</value>
     <value type="int">13</value>
     <value type="int">14</value>
    </valuelist>
    <valuelist type="QVariantList" key="Analyzer.Valgrind.VisibleErrorKinds">
     <value type="int">0</value>
     <value type="int">1</value>
     <value type="int">2</value>
     <value type="int">3</value>
     <value type="int">4</value>
     <value type="int">5</value>
     <value type="int">6</value>
     <value type="int">7</value>
     <value type="int">8</value>
     <value type="int">9</value>
     <value type="int">10</value>
     <value type="int">11</value>
     <value type="int">12</value>
     <value type="int">13</value>
     <value type="int">14</value>
    </valuelist>
    <value type="QString" key="ProjectExplorer.ProjectConfiguration.DefaultDisplayName">FinalTerm</value>
    <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName"></value>
    <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">Qt4ProjectManager.Qt4RunConfiguration</value>
    <value type="int" key="Qt4ProjectManager.Qt4RunConfiguration.BaseEnvironmentBase">2</value>
    <value type="QString" key="Qt4ProjectManager.Qt4RunConfiguration.CommandLineArguments"></value>
    <value type="QString" key="Qt4ProjectManager.Qt4RunConfiguration.ProFile">FinalTerm.pro</value>
    <value type="bool" key="Qt4ProjectManager.Qt4RunConfiguration.UseDyldImageSuffix">false</value>
    <value type="bool" key="Qt4ProjectManager.Qt4RunConfiguration.UseTerminal">false</value>
    <valuelist type="QVariantList" key="Qt4ProjectManager.Qt4RunConfiguration.UserEnvironmentChanges"/>
    <value type="QString" key="Qt4ProjectManager.Qt4RunConfiguration.UserWorkingDirectory"></value>
    <value type="uint" key="RunConfiguration.QmlDebugServerPort">3768</value>
    <value type="bool" key="RunConfiguration.UseCppDebugger">true</value>
    <value type="bool" key="RunConfiguration.UseQmlDebugger">false</value>
    <value type="bool" key="RunConfiguration.UseQmlDebuggerAuto">false</value>
   </valuemap>
   <value type="int" key="ProjectExplorer.Target.RunConfigurationCount">1</value>
  </valuemap>
 </data>
 <data>
  <variable>ProjectExplorer.Project.TargetCount</variable>
  <value type="int">1</value>
 </data>
 <data>
  <variable>ProjectExplorer.Project.Updater.EnvironmentId</variable>
  <value type="QString">{7c0785b9-fe93-4db5-89cb-0b1182acef47}</value>
 </data>
 <data>
  <variable>ProjectExplorer.Project.Updater.FileVersion</variable>
  <value type="int">10</value>
 </data>
</qtcreator>
#include <QtGui>
#include "mainwindow.h"
#include"w_login.h"
#include <mysql_establish.h>
#include<QDebug>
#include<QObject>
#include<QMessageBox>

int main(int argc, char *argv[])
{
    QApplication a(argc, argv);
    Mysql_Establish con;
    con.connects();
   // con.initilize();

    int flag = 0;
//    qDebug()<<con.data();
    // This part is about how to set up connections.
    while (con.data().isOpen()==false && flag == 0){
        QMessageBox::StandardButton tk=QMessageBox::warning(0,"Wrong","Wrong connection",
                                    QMessageBox::Retry|QMessageBox::Cancel);
        if (tk==QMessageBox::Retry)
        {
            flag = 0;
            con.connects();
        }
        else if (tk==QMessageBox::Cancel)
        {
            flag = 1;
            return 0;
        }
    }

    {

    W_login login(&con);
    MainWindow w(&con);
    QObject::connect(&login,SIGNAL(found(QVector<int>)),&w,SLOT(set_pri(QVector<int>)));
    //Something about the privilege System.
    login.show();
    return a.exec();
    }


}
#include "mainwindow.h"
#include "ui_mainwindow.h"
#include"mysql_establish.h"
#include<QDebug>
#include"privilege.h"

MainWindow::MainWindow(Mysql_Establish * connects, QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::MainWindow),
    con(connects)
{
    ui->setupUi(this);
    declearer = new QPushButton("declear",this);
    ui->horizontalLayout->addWidget(declearer);

    newer = new news(con);
    ui->tableView->setModel(newer->getmodel());
    ui->tableView->horizontalHeader()->setResizeMode(QHeaderView::Stretch);
    ui->tableView->horizontalHeader()->setStretchLastSection(true);
    connect(declearer,SIGNAL(clicked()),newer,SLOT(show()));

    connects->initilize();
    //connect(ui->tableView,SIGNAL(clicked(QModelIndex)),)
//    connect->initilize();
}

MainWindow::~MainWindow()
{
    delete ui;
  //  qDebug()<<cd->e_hum();
}

void MainWindow::on_pushButton_clicked()
{
    pf->show();
}

void MainWindow::on_pushButton_2_clicked()
{
    Mysql_Establish init;
    init.initilize();
}

void MainWindow::set_pri(QVector<int> priv)
{
    this->show();
    cd = new privilege(priv,this);
    pf = new pForm(con,cd);

    if(cd->e_tutor()&cd->e_stu()){
        ui->pushButton_2->show();
    }
    else{
        ui->pushButton_2->hide();
    }

    qDebug()<<cd->e_tutor();
    if(cd->e_tutor())
    {
        declearer->show();
    }
    else{
        declearer->hide();
    }
}

#ifndef MAINWINDOW_H
#define MAINWINDOW_H

#include <QMainWindow>
#include<QDebug>
#include<QVector>
#include "privilege.h"
#include"mysql_establish.h"
#include"pform.h"
#include<QPushButton>
#include"news.h"
namespace Ui {
class MainWindow;
}

class MainWindow : public QMainWindow
{
    Q_OBJECT
    
public:
    explicit MainWindow(Mysql_Establish * connect,QWidget *parent = 0);
    ~MainWindow();
    
private slots:
    void on_pushButton_clicked();

    void on_pushButton_2_clicked();

    void set_pri(QVector<int> priv);


private:
    Ui::MainWindow *ui;
    QVector<int> pri;
    privilege* cd;
    pForm* pf;
    Mysql_Establish * con;
    news *newer;
    QPushButton * declearer;


};

#endif // MAINWINDOW_H
<?xml version="1.0" encoding="UTF-8"?>
<ui version="4.0">
 <class>MainWindow</class>
 <widget class="QMainWindow" name="MainWindow">
  <property name="geometry">
   <rect>
    <x>0</x>
    <y>0</y>
    <width>400</width>
    <height>300</height>
   </rect>
  </property>
  <property name="windowTitle">
   <string>MainWindow</string>
  </property>
  <widget class="QWidget" name="centralWidget">
   <layout class="QVBoxLayout" name="verticalLayout_2">
    <item>
     <layout class="QVBoxLayout" name="verticalLayout">
      <item>
       <widget class="QTableView" name="tableView"/>
      </item>
      <item>
       <layout class="QHBoxLayout" name="horizontalLayout">
        <item>
         <widget class="QPushButton" name="pushButton">
          <property name="text">
           <string>people</string>
          </property>
         </widget>
        </item>
        <item>
         <widget class="QPushButton" name="pushButton_2">
          <property name="text">
           <string>Initialize</string>
          </property>
         </widget>
        </item>
       </layout>
      </item>
     </layout>
    </item>
   </layout>
  </widget>
  <widget class="QMenuBar" name="menuBar">
   <property name="geometry">
    <rect>
     <x>0</x>
     <y>0</y>
     <width>400</width>
     <height>25</height>
    </rect>
   </property>
  </widget>
  <widget class="QToolBar" name="mainToolBar">
   <attribute name="toolBarArea">
    <enum>TopToolBarArea</enum>
   </attribute>
   <attribute name="toolBarBreak">
    <bool>false</bool>
   </attribute>
  </widget>
  <widget class="QStatusBar" name="statusBar"/>
 </widget>
 <layoutdefault spacing="6" margin="11"/>
 <resources/>
 <connections/>
</ui>
#include "mysql_establish.h"
#include<QtSql>
#include<QtDebug>
#include<QMessageBox>
#include<QString>

//QSqlDatabase Mysql_Establish::database;

Mysql_Establish::Mysql_Establish(QString type,QString hostname,
                                 QString username,QString password,
                                 QString basename,int po)
{
    Type=type;
    Hostname=hostname;
    Username=username;
    Password=password;
    Basename=basename;
    port=po;
}
Mysql_Establish::~Mysql_Establish(){
    database.close();
}

 void Mysql_Establish::connects(){
            database=QSqlDatabase::addDatabase(Type);
            database.setHostName(Hostname);
            database.setUserName(Username);
            database.setPassword(Password);
            database.setDatabaseName(Basename);
            database.setPort(port);
            database.open();

}
bool Mysql_Establish::initilize(){
    query=QSqlQuery(Mysql_Establish::database);
//    query.exec("create table person(name char(64) primary key,"
//               "birth date,password char(20),priority bigint(4),"
//               "type bigint(4),phone char(30),email char(30))");
    QString create_news=QString("CREATE TABLE news(id INT(11) NOT NULL AUTO_INCREMENT, title TEXT , contents TEXT,PRIMARY KEY(id))ENGINE=InnoDB");
    QString create_readable=QString("CREATE TABLE readable(id INT(11) NOT NULL AUTO_INCREMENT,news_id INT(11),per_name char(64),PRIMARY KEY(id), FOREIGN KEY(news_id) REFERENCES news(id) ON DELETE CASCADE,FOREIGN KEY (per_name) REFERENCES person(name)ON DELETE CASCADE)ENGINE=InnoDB");
    query.exec(create_news);
    query.exec(create_readable);
   // qDebug()<<query.lastError();



}

QSqlDatabase Mysql_Establish::data()
{
        return database;
}

#ifndef MYSQL_ESTABLISH_H
#define MYSQL_ESTABLISH_H
#include<QtSql>
#include<QString>

class Mysql_Establish
{
public:
    Mysql_Establish(QString ="QMYSQL", QString="localhost" ,
                    QString ="root", QString="1562348" , QString ="test",int =3306);
    void connects();
    bool initilize();
    QSqlDatabase data();
    ~Mysql_Establish();
private:
    QString Type;
    QString Hostname;
    QString Username;
    QString Password;
    QString Basename;
    QSqlQuery query;
    QSqlDatabase database;
    int port;
};

#endif // MYSQL_ESTABLISH_H
#include "news.h"
#include "ui_news.h"
#include<QDebug>
#include<QMessageBox>
#include<QString>
#include<QTextDocument>
news::news(Mysql_Establish *conn,QWidget *parent) :
    QDialog(parent),
    ui(new Ui::news),
    con(conn)
{
    ui->setupUi(this);
   // qDebug()<<this->exec();
   // qDebug()<<con->data();
    query = new QSqlQuery(con->data());
    model = new QSqlTableModel(this,con->data());
    model->setTable("news");
    model->removeColumn(2);
    model->removeColumn(0);
    model->select();

//    modeld = new QSqlTableModel(this,con->data());
//    modeld->
//    QPushButton * ok =ui->buttonBox->button(QDialogButtonBox::Ok);
    connect(ui->buttonBox,SIGNAL(accepted()),this,SLOT(insert()));
//    ui->buttonBox->standardButton(ok);
//    qDebug()<<ok;
  //  connect(
}

news::~news()
{
    delete ui;

}

void news::insert(){
    int flag=QMessageBox::question(this,"Are you sure","Your news is going to be published",QMessageBox::Save,QMessageBox::Cancel);
 //   qDebug()<<flag;
    if(flag==QMessageBox::Cancel){
        this->show();
    }
    else{
        QString til=ui->lineEdit->text();
        QString cont=ui->textEdit->document()->toHtml();
        int loc;
                // qDebug()<<cont->toHtml();
//        ui->label_2->setText(ui->textEdit->document()->toHtml());
//        ui->textEdit_2->setText(cont->toHtml());
        QString pre("INSERT INTO `test`.`news` (`id`, `title`, `contents`) VALUES (NULL, :title, :contents)");
        query->prepare(pre);
        query->bindValue(":title",til);
        query->bindValue("contents",cont);
        if(query->exec()==false){
                QMessageBox::warning(this,tr("Failed"),
                                     tr("%1").arg(query->lastError().text()),QMessageBox::Yes);
            }
        else{
            ui->lineEdit->clear();
            ui->textEdit->clear();
//            query->value()

            // refresh readable
//get id
            QSqlQuery test(con->data());
            test.exec("select * from news");
            while(test.next()){
                if(test.value(1)==til&test.value(2)==cont){
                    loc=test.value(0).toInt();
                    break;
                }

            }
            QSqlQuery per(con->data());

            per.exec("select * from person");
            while(per.next()){
                QString name = per.value(0).toString();
                QSqlQuery inst(con->data());
                inst.prepare("INSERT INTO `test`.`readable` (`id`, `news_id`, `per_name`) VALUES (NULL, :id, :name);");
                inst.bindValue(":id",loc);
                inst.bindValue(":name",name);
                if(inst.exec()==false)
                qDebug()<<name<<loc<<endl;

            }
            model->select();

//            while(test.next())
//            {
//                QString name = test.value(0).toString();
//                QString ins=QString("INSERT INTO readable (`id`, `news_id`, `per_name`) VALUES (NULL,:news_id, :name)");
////                QSqlQuery("insert")

//            }

        }
    }
}
void news::detail(QModelIndex &index){
//    model

}
#ifndef NEWS_H
#define NEWS_H

#include <QDialog>
#include"mysql_establish.h"
#include<QSqlTableModel>
#include<QSqlRecord>
#include<QSqlQuery>
#include<QModelIndex>
#include<QSqlTableModel>
#include<QModelIndex>
#include<QSqlRelationalTableModel>

namespace Ui {
class news;
}

class news : public QDialog
{
    Q_OBJECT
    
public:
    explicit news(Mysql_Establish *conn,QWidget *parent = 0);
    ~news();
    QSqlTableModel * getmodel(){
        return model;
    }
    
private slots:

private:
    Ui::news *ui;
    Mysql_Establish *con;
    QSqlQuery *query;
    QSqlTableModel * model;
    QSqlRelationalTableModel *modeld;
private slots:
    void insert();
    void detail(QModelIndex &index);


};

#endif // NEWS_H
<?xml version="1.0" encoding="UTF-8"?>
<ui version="4.0">
 <class>news</class>
 <widget class="QDialog" name="news">
  <property name="geometry">
   <rect>
    <x>0</x>
    <y>0</y>
    <width>400</width>
    <height>300</height>
   </rect>
  </property>
  <property name="windowTitle">
   <string>Dialog</string>
  </property>
  <layout class="QVBoxLayout" name="verticalLayout_2">
   <item>
    <layout class="QVBoxLayout" name="verticalLayout">
     <item>
      <layout class="QHBoxLayout" name="horizontalLayout">
       <item>
        <widget class="QLabel" name="label">
         <property name="text">
          <string>Title:</string>
         </property>
        </widget>
       </item>
       <item>
        <widget class="QLineEdit" name="lineEdit"/>
       </item>
      </layout>
     </item>
     <item>
      <widget class="QTextEdit" name="textEdit"/>
     </item>
    </layout>
   </item>
   <item>
    <widget class="QDialogButtonBox" name="buttonBox">
     <property name="orientation">
      <enum>Qt::Horizontal</enum>
     </property>
     <property name="standardButtons">
      <set>QDialogButtonBox::Cancel|QDialogButtonBox::Ok</set>
     </property>
    </widget>
   </item>
  </layout>
 </widget>
 <resources/>
 <connections>
  <connection>
   <sender>buttonBox</sender>
   <signal>accepted()</signal>
   <receiver>news</receiver>
   <slot>accept()</slot>
   <hints>
    <hint type="sourcelabel">
     <x>248</x>
     <y>254</y>
    </hint>
    <hint type="destinationlabel">
     <x>157</x>
     <y>274</y>
    </hint>
   </hints>
  </connection>
  <connection>
   <sender>buttonBox</sender>
   <signal>rejected()</signal>
   <receiver>news</receiver>
   <slot>reject()</slot>
   <hints>
    <hint type="sourcelabel">
     <x>316</x>
     <y>260</y>
    </hint>
    <hint type="destinationlabel">
     <x>286</x>
     <y>274</y>
    </hint>
   </hints>
  </connection>
 </connections>
</ui>
#include "pform.h"
#include "ui_pform.h"
#include <QDebug>
#include<QSizePolicy>
#include<QHeaderView>
#include<QMessageBox>
#include"submit_dia.h"
#include<QVector>
#include<QStringList>
#include<QString>
#include<QPoint>
#include<QModelIndex>
#include<QSqlRecord>
#include"privilege.h"


pForm::pForm(Mysql_Establish *establish, privilege *test, QWidget *parent) :
    QWidget(parent),
    ui(new Ui::pForm),
    tk(test)
{
    ui->setupUi(this);
    en=establish;
    database=en->data();


//Model
    model= new QSqlTableModel(this,database);
    model->setTable("person");
//    model->select();
    model->removeColumn(4);
    model->removeColumn(3);
    model->removeColumn(2);
    model->setEditStrategy(QSqlTableModel::OnManualSubmit);

    // specifics privileges:
        if(test->e_hum()==true){

            page1 = new QWidget;
            page2 = new QWidget;

            center = new QGridLayout;
            tabbar = new QTabWidget(this);

            //page1:
           {
              createpage1(page1);
            }
            tabbar->addTab(page1,"View");
            // page2
            {
                createpage2(page2);
            }
            tabbar->addTab(page2,"set");

            center->addWidget(tabbar);
            this->setLayout(center);
        }
else{
            createpage1(this);
            deleter->hide();
            reseter1->hide();
            name->setReadOnly(true);
            phone->setReadOnly(true);
            email->setReadOnly(true);
            birth->setReadOnly(true);
            stu->setEditTriggers(QAbstractItemView::NoEditTriggers);
}


        //Clicked Slot:
        //    connect(stu,SIGNAL(clicked(QModelIndex )),stu,SLOT())
            CONNECT(test->e_hum());
//            int row = model2->rowCount();
//            model2->insertRow(row);
//            model2->setData(model2->index(row,0),"ying");
//            model2->submitAll();

//            tabbar->setCurrentIndex(1);
//            qDebug()<<tabbar->currentIndex();


}

pForm::~pForm()
{
    delete ui;
}

void pForm::createpage1(QWidget *tku){
    //checkBox:
        student = new QCheckBox("stu",tku);
        student->setChecked(false);
        professor = new QCheckBox("pro",tku);
        professor->setChecked(false);

    //Widget
        deleter = new QPushButton("delete",tku);
        reseter1 = new QPushButton("reset",tku);

        name = new QLineEdit(tku);
        phone = new QLineEdit(tku);
        email = new QLineEdit(tku);
        birth = new QLineEdit(tku);

        in = new QLabel("name",tku);
        ip = new QLabel("Phone",tku);
        ie = new QLabel("Email",tku);
        ib = new QLabel("Birth",tku);


    //View
        mapper = new QDataWidgetMapper(tku);
        mapper->setModel(model);
        stu = new QTableView(tku);
        stu->setModel(model);


        //To highlight the entire row, insteads of a signal cell;
        stu->setSelectionBehavior(QAbstractItemView::SelectRows);
        stu->setSelectionMode(QAbstractItemView::SingleSelection);

        // set readonly

        //size
    //    stu->resizeColumnsToContents();
    //    stu->setSizePolicy(QSizePolicy::Ignored,QSizePolicy::Ignored);
        stu->horizontalHeader()->setResizeMode(QHeaderView::Stretch);
        stu->horizontalHeader()->setStretchLastSection(true);


    //Layout
        glayout = new QGridLayout;
        vlayout = new QVBoxLayout;
        hlayout = new QHBoxLayout;
        glayoutc = new QGridLayout;


        glayoutc->addWidget(professor,1,2);

        glayoutc->addWidget(student,2,2);



        glayout->addWidget(in,1,1);
        glayout->addWidget(ib,1,3);
        glayout->addWidget(name,1,2);
        glayout->addWidget(birth,1,4);
        glayout->addWidget(deleter,1,5);

        glayout->addWidget(ie,2,1);
        glayout->addWidget(ip,2,3);
        glayout->addWidget(email,2,2);
        glayout->addWidget(phone,2,4);
        glayout->addWidget(reseter1,2,5);

        hlayout->addLayout(glayout);
        hlayout->addLayout(glayoutc);

        vlayout->addWidget(stu);
        vlayout->addLayout(hlayout);

        tku->setLayout(vlayout);
        //   tab = new QTabWidget(tku);

        mapper->addMapping(name,0);
        mapper->addMapping(birth,1);
        mapper->addMapping(email,2);
        mapper->addMapping(phone,3);
        mapper->toFirst();
}
void pForm::createpage2(QWidget *tku){

                 level1 = new QGridLayout;
                 level2_1 = new QHBoxLayout;
                 level2_2 = new QHBoxLayout;
                 all = new QVBoxLayout;

                 submitter = new QPushButton("submit",tku);
                 reseter2 = new QPushButton("reset",tku);
                 reseter2->hide();


                 cal= new QCalendarWidget(tku);
                 cal->hide();
                 pname = new QLineEdit(tku);
                 pbirth = new yingQlineEdit(tku);
                 pphone = new QLineEdit(tku);
                 pemail = new QLineEdit(tku);
                 ppass = new QLineEdit(tku);
                 p2pass = new QLineEdit(tku);
                 ppriority = new QComboBox(tku);
                 ptype = new QComboBox(tku);

                 ppass->setEchoMode(QLineEdit::Password);
                 p2pass->setEchoMode(QLineEdit::Password);

                 ppriority->addItem(tk->p2str(0));
                 ppriority->addItem(tk->p2str(1));
                 ppriority->addItem(tk->p2str(2));
                 ppriority->addItem(tk->p2str(3)); //Using the name of the class to call static function doesn't work for me


                 ptype->addItem(tk->type2str(0));
                 ptype->addItem(tk->type2str(1));
                 ptype->addItem(tk->type2str(2));


                 lpname = new QLabel("name",tku);
                 lpbirth = new QLabel("birth",tku);
                 lpphone = new QLabel("phone",tku);
                 lpemail = new QLabel("email",tku);
                 lppass = new QLabel("pass",tku);
                 lppriority = new QLabel("pri",tku);
                 lptype = new QLabel("type",tku);

                 query = new QSqlQuery(database);

                 level1->addWidget(pname,1,2);
                 level1->addWidget(pbirth,1,4);
                 level1->addWidget(lpname,1,1);
                 level1->addWidget(lpbirth,1,3);
                 level1->addWidget(pemail,2,2);
                 level1->addWidget(pphone,2,4);
                 level1->addWidget(lpphone,2,3);
                 level1->addWidget(lpemail,2,1);

                 level2_1->addWidget(lppass);
                 level2_1->addWidget(ppass);
                 level2_1->addWidget(p2pass);

                 level2_2->addWidget(lppriority);
                 level2_2->addWidget(ppriority);
                 level2_2->addWidget(lptype);
                 level2_2->addWidget(ptype);
                 level2_2->addWidget(submitter);
                 level2_2->addWidget(reseter2);

                 all->addLayout(level1);
                 all->addLayout(level2_1);
                 all->addLayout(level2_2);

                 tku->setLayout(all);

}

void pForm::CONNECT(bool mode){
    if(mode==false){

    }
    else{
        connect(submitter,SIGNAL(clicked()),this,SLOT(submit()));
        connect(reseter1,SIGNAL(clicked()),this,SLOT(reset1()));
        connect(reseter2,SIGNAL(clicked()),this,SLOT(reset2()));
        connect(deleter,SIGNAL(clicked()),this,SLOT(del()));

        connect(pbirth,SIGNAL(clicked()),this,SLOT(setbirth()));
        connect(cal,SIGNAL(clicked(QDate)),this,SLOT(setbirth(QDate)));
        {
            connect(this,SIGNAL(clearall()),pname,SLOT(clear()));
            connect(this,SIGNAL(clearall()),pbirth,SLOT(clear()));
            connect(this,SIGNAL(clearall()),pemail,SLOT(clear()));
            connect(this,SIGNAL(clearall()),pphone,SLOT(clear()));
            connect(this,SIGNAL(clearall()),p2pass,SLOT(clear()));
            connect(this,SIGNAL(clearall()),ppass,SLOT(clear()));
        }
    }

    connect(stu,SIGNAL(clicked(QModelIndex )),mapper,SLOT(setCurrentModelIndex(QModelIndex )));
    connect(professor,SIGNAL(clicked(bool)),this,SLOT(pshow(bool)));
    connect(student,SIGNAL(clicked(bool)),this,SLOT(pshow(bool)));


}

void pForm::submit(){

//    submitter = new QPushButton(tku);
//    cal= new QCalendarWidget(tku);
//    cal->hide();
//    pname = new QLineEdit(tku);
//    pbirth = new yingQlineEdit(tku);
//    pphone = new QLineEdit(tku);
//    pemail = new QLineEdit(tku);
//    ppass = new QLineEdit(tku);
//    p2pass = new QLineEdit(tku);
//    ppriority = new QLineEdit(tku);
//    ptype = new QLineEdit(tku);
    if(p2pass->text().trimmed()!=ppass->text().trimmed()){
        QMessageBox::warning(this,"Wrong Passer","The passwords do not equal",QMessageBox::Yes);
    }


    else{
    QVector<QString> vec;
    vec.append(pname->text());
    vec.append(pbirth->text());
    vec.append(ppass->text());
    vec.append(tk->p2str(ppriority->currentIndex()));
    vec.append(tk->type2str(ptype->currentIndex()));
    vec.append(pphone->text());
    vec.append(pemail->text());



    QString str = QString("name,birth,password,priority,type,phone,email");
    QStringList strlist = str.split(",");
    bool could = true;
    for (int i = 0 ; i<= 6;i++)
    {
        if(vec[i]==NULL)
        {

            QMessageBox::warning(this,tr("Incomplete"),
                                 tr("%1 is missing").arg(strlist.at(i)),QMessageBox::Yes);
            could = false;
            break;
        }
    }
//    /*qDebug*/()<<could;
    if(could == true)
    {
    submit_dia * sub = new submit_dia(this);
    sub->setModal(true);
    sub->setdata(vec);
   // sub->show();
    if(sub->exec()==true){
    QString pre=QString ("INSERT INTO person (`name`, `birth`, `password`, `priority`, `type`, `phone`, `email`) VALUES (:name,:birth,:password,:priority,:type,:phone,:email)");
    query->prepare(pre);
    query->bindValue(":name",pname->text().toAscii());
    query->bindValue(":birth",pbirth->text());
    query->bindValue(":password",ppass->text());
    query->bindValue(":priority",ppriority->currentIndex());
    query->bindValue(":type",ptype->currentIndex());
    query->bindValue(":phone",pphone->text());
    query->bindValue(":email",pemail->text());
    if(query->exec()==false){
        QMessageBox::warning(this,tr("Failed"),
                             tr("%1").arg(query->lastError().text()),QMessageBox::Yes);
    }
    else{
    emit(clearall());
    ptype->setCurrentIndex(-1);
    ppriority->setCurrentIndex(-1);
    pshow(true); //I didn't actual need the inputed variable itself, just to keep consistence of the Two functions
    }
    }
    }
    }
}

int pForm::pshow(bool state){
    int a = professor->checkState();
    int b = student->checkState();

    if(a==Qt::Unchecked&&b==Qt::Unchecked)
        model->setFilter("type=11");   //11 Does not exist,Sorry for My poor SQL
    if(a==Qt::Checked&&b==Qt::Checked)
        model->setFilter("");
    if(a==Qt::Unchecked&&b==Qt::Checked)
        model->setFilter("type=1");   // 1 stands for pro
    if(a==Qt::Checked&&b==Qt::Unchecked)
        model->setFilter("type=2");  //2 stands for stu


//    qDebug()<<model->filter()<<a<<b;
    model->select();
}
void pForm::setbirth()
{
    callayout = new QGridLayout;
    //cal->adjustSize();
//    int w=this->size().width();
//    int h=this->size().height();
//    cal->setGeometry(0,0,w,h);
//    cal->show();
    cal->resize(this->size());
    cal->show();
    callayout->addWidget(cal,1,1);


//    lpname = new QLabel("name",tku);
//    lpbirth = new QLabel("birth",tku);
//    lpphone = new QLabel("phone",tku);
//    lpemail = new QLabel("email",tku);
//    lppass = new QLabel("pass",tku);
//    lppriority = new QLabel("pri",tku);
//    lptype = new QLabel("type",tku);

    pname->hide();
    pbirth->hide();
    pphone->hide();
    pemail->hide();
    ppass->hide();
    p2pass->hide();
    ppriority->hide();
    ptype->hide();

    lpname->hide();
    lpbirth->hide();
    lpphone->hide();
    lpemail->hide();
    lppass->hide();
    lppriority->hide();
    lptype->hide();
    submitter->hide();
    all->removeItem(level1);
    all->removeItem(level2_1);
    all->removeItem(level2_2);
    all->addWidget(cal);
    delete level1;
    delete level2_1;
    delete level2_2;
}
void pForm::setbirth(QDate date){
    QCalendarWidget * sen=(QCalendarWidget *)this->sender();
    cal->hide();

    pname->show();
    pbirth->show();
    pphone->show();
    pemail->show();
    ppass->show();
    p2pass->show();
    ppriority->show();
    ptype->show();

    lpname->show();
    lpbirth->show();
    lpphone->show();
    lpemail->show();
    lppass->show();
    lppriority->show();
    lptype->show();
    submitter->show();


    all->removeWidget(cal);
    level1 = new QGridLayout;
    level2_1 = new QHBoxLayout;
    level2_2 = new QHBoxLayout;

    level1->addWidget(pname,1,2);
    level1->addWidget(pbirth,1,4);
    level1->addWidget(lpname,1,1);
    level1->addWidget(lpbirth,1,3);
    level1->addWidget(pemail,2,2);
    level1->addWidget(pphone,2,4);
    level1->addWidget(lpphone,2,3);
    level1->addWidget(lpemail,2,1);

    level2_1->addWidget(lppass);
    level2_1->addWidget(ppass);
    level2_1->addWidget(p2pass);

    level2_2->addWidget(lppriority);
    level2_2->addWidget(ppriority);
    level2_2->addWidget(lptype);
    level2_2->addWidget(ptype);
    level2_2->addWidget(submitter);
    level2_2->addWidget(reseter2);

    all->addLayout(level1);
    all->addLayout(level2_1);
    all->addLayout(level2_2);

    pbirth->setText(date.toString(Qt::ISODate));

}

void pForm::del(){

    QModelIndex index = stu->selectionModel()->currentIndex();
//    qDebug()<<stu->selectionModel()->currentIndex().data();
    QString name=model->record(index.row()).value(0).toString();

//    int row =stu->selectionModel()->currentIndex().row();
//    int col = stu->selectionModel()->currentIndex();
//    model->data()
//    qDebug()<<stu->indexAt(QPoint(1,row));

//    qDebug()<<model->dat(
       int flag =QMessageBox::warning(this,tr("Are you sure"),tr("are you sure delete %1?").arg(name),QMessageBox::Ok,QMessageBox::Cancel);
       if (flag == QMessageBox::Ok){
           model->removeRow(stu->selectionModel()->currentIndex().row());
           model->submitAll();
           pshow(true);
       }else{
           model->revertAll();
       }
//    model->data(QModeli)
}
void pForm::reset_warning(int index)
{
    //Prevent go back to Page 1(In this case labeled 0
        tabbar->setCurrentIndex(1);
}

void pForm::reset1(){
    QModelIndex index = stu->selectionModel()->currentIndex();
    if(index.isValid()){
    QSqlTableModel * model2= new QSqlTableModel(this,database);
    model2->setTable("person");
    model2->select();
    QSqlRecord records = model2 ->record(index.row());

    //Turn To Page 2
    submitter->hide();
    reseter2->show();
    tabbar->setCurrentIndex(1);
    connect(tabbar,SIGNAL(currentChanged(int)),this,SLOT(reset_warning(int)));
    // Modify Page2
    QString name=records.value(0).toString();
    QString birth = records.value(1).toString();
    QString pass = records.value(2).toString();
    QString pri = records.value(3).toString();
    QString type = records.value(4).toString();
    QString phone = records.value(5).toString();
    QString email = records.value(6).toString();

    pname->setText(name);
    pbirth->setText(birth);
    ppass->setText(pass);
    p2pass->setText(pass);
    ppriority->setCurrentIndex(pri.toInt());
    ptype->setCurrentIndex(type.toInt());
    pphone->setText(phone);
    pemail->setText(email);
    model->removeRow(index.row());

//    qDebug()<<stu->selectionModel()->currentIndex().data();
//    =model->record(index.row()).value(0).toString();
//    delete submitter;

//   submitter = reseter;
    }

}
void pForm::reset2(){
    int flag =QMessageBox::warning(this,tr("Are you sure"),tr("are you sure to modify ?"),QMessageBox::Yes,QMessageBox::Cancel);

    if (flag == QMessageBox::Yes){
//        model->removeRow(stu->selectionModel()->currentIndex().row());
        model->submitAll();
        //re-insert
        this->submit();
    }else{
        model->revertAll();
        emit(clearall());
        ptype->setCurrentIndex(-1);
        ppriority->setCurrentIndex(-1);

    }

    disconnect(tabbar,SIGNAL(currentChanged(int)),0,0);
    submitter->show();
    reseter2->hide();

}

#ifndef PFORM_H
#define PFORM_H

#include <QWidget>
#include"privilege.h"
#include"mysql_establish.h"
#include<QLabel>
#include<QLineEdit>
#include<QPushButton>
#include<QTableWidget>
#include<QTabWidget>
#include<QLayout>
#include<QTableWidget>
#include<QSqlTableModel>
#include<QDataWidgetMapper>
#include"mysql_establish.h"
#include<QCheckBox>
#include<QTableWidget>
#include<QPushButton>
#include<QSignalMapper>
#include"yingqlineedit.h"
#include<QCalendarWidget>
#include<QDate>
#include<QSqlRecord>
#include <QVariant>
#include<QSqlQuery>
#include<QComboBox>

namespace Ui {
class pForm;
}

class pForm : public QWidget
{
    Q_OBJECT
    
public:
    explicit pForm(Mysql_Establish *establish,privilege *test,QWidget *parent = 0);
    ~pForm();

    
private slots:
    void submit();
    int pshow(bool state);
    void setbirth();
    void setbirth(QDate date);
    void del();
    void reset1();
    void reset2();
    void reset_warning(int );
signals:
    void clearall();
private:
    Ui::pForm *ui;
    privilege *tk;


    QDataWidgetMapper * mapper;

    Mysql_Establish *en;
    QSqlDatabase database;
    QSqlTableModel * model;

   //QTableWidget * tabbar;


//pages:
    QWidget *page1;
    QWidget *page2;
   //page1
    // Widgets:
    QTabWidget * tabbar;

    QVBoxLayout * vlayout;
    QHBoxLayout * hlayout;

    QGridLayout  * glayout;
    QGridLayout * glayoutc;
    QGridLayout * center;

    QTableView * stu;

    QCheckBox *professor;
    QCheckBox *student;

    QLineEdit * name;
    QLineEdit * birth;
    QLineEdit * phone;
    QLineEdit * email;

    QLabel * in;
    QLabel * ib;
    QLabel *ip;
    QLabel *ie;
//page2:

    QSqlQuery * query;
    QLineEdit * pname;
    QCalendarWidget *cal;
    QGridLayout * callayout;
    yingQlineEdit * pbirth;
    QLineEdit * pphone;
    QLineEdit * pemail;
    QLineEdit * ppass;
    QLineEdit * p2pass;
    QComboBox * ppriority;
    QComboBox * ptype;

    QLabel * lpname;
    QLabel * lpbirth;
    QLabel * lpphone;
    QLabel * lpemail;
    QLabel * lppass;
    QLabel * lppriority;
    QLabel * lptype;

    QGridLayout * level1;
    QHBoxLayout * level2_1;
    QHBoxLayout * level2_2;
    QVBoxLayout * all;

    QPushButton *submitter;
    QPushButton * deleter;
    QPushButton * reseter1;
    QPushButton * reseter2;

// pack up
    void createpage1(QWidget * tku);
    void createpage2(QWidget * tku);

    void CONNECT(bool mode);

};

#endif // PFORM_H
<?xml version="1.0" encoding="UTF-8"?>
<ui version="4.0">
 <class>pForm</class>
 <widget class="QWidget" name="pForm">
  <property name="geometry">
   <rect>
    <x>0</x>
    <y>0</y>
    <width>400</width>
    <height>300</height>
   </rect>
  </property>
  <property name="windowTitle">
   <string>Form</string>
  </property>
 </widget>
 <resources/>
 <connections/>
</ui>
#include "privilege.h"
#include<QDebug>

privilege::privilege(QVector<int> init, QObject *parent) :
    QObject(parent),
    pri(init)
{
  //  qDebug()<<init;
    switch (pri[0]){
    case 0:human=false;doc=false;break;
    case 1:human=true;doc=false;break;
    case 2:doc=true;human=false;break;
    case 3:human=true;doc=true;break;
    }
    switch (pri[1]){
    case 0:tutor=false;stu=false;break;
    case 1:tutor=false;stu=true;break;
    case 2:tutor=true;stu=false;break;
    }
}
QString privilege::p2str(int type){
    switch (type){
    case 0:return "none";
    case 1:return "human";
    case 2:return "doc";
    case 3:return "full";
    }
}
int privilege::str2p(QString str){
        if(str=="none")
            return 0;
        if (str=="human")
            return 1;
        if (str=="doc")
            return 2;
        if (str=="full")
            return 3;

}
QString privilege::type2str(int p){


        switch (p){
        case 0:return "none";
        case 1:return "stu";
        case 2:return "tutor";
        }

}
int privilege::str2type(QString str){
//    switch (str){
//    case "none":return 0;
//    case "stu":return 1;
//    case "tutor":return 2;

//    }
    if(str=="none")
        return 0;
    if(str=="stu")
        return 1;
    if(str=="tutor")
        return 2;
}

privilege::~privilege(){
}
#ifndef PRIVILEGE_H
#define PRIVILEGE_H

#include <QObject>
#include<QVector>
#include<QString>

class privilege : public QObject
{
    Q_OBJECT
public:
    explicit privilege(QVector<int> init,QObject *parent = 0);
    bool e_hum(){
        return human;
    }
    bool e_doc(){
        return doc;
    }
    bool e_tutor(){
        return tutor;
    }
    bool e_stu(){
        return stu;
    }

    /*static*/ QString type2str(int type);
    static int str2type(QString str);
    /*static*/ QString p2str(int p);
    static int str2p(QString str);
    ~privilege();

private:
    QVector<int> pri;
    bool human;
    bool doc;
    bool tutor;
    bool stu;
    
signals:
    
public slots:
    
};

#endif // PRIVILEGE_H
#include "sql_professor.h"
#include<QDebug>

sql_professor::sql_professor(QSqlDatabase db, QObject *parent) :
    QObject(parent),
    data(db)
{
    model=new QSqlTableModel(this,data);
    query=QSqlQuery(db);
    model->setTable("person");
    model->select();
    model->setEditStrategy(QSqlTableModel::OnManualSubmit);
    qDebug()<<model->lastError().text();

}

bool sql_professor::insert(){

    int rowNum=model->rowCount();
    model->insertRow(rowNum);
    model->setData(model->index(rowNum,0),name);
    model->setData(model->index(rowNum,1),age);

    if(model->submitAll()){
        model->database().commit();
        qDebug()<<"SQL_Submitted";
        return true;
    }
    else
    {
        model->database().rollback();
        qDebug()<<"arrogant";
        return false;
    }
}
#ifndef SQL_PROFESSOR_H
#define SQL_PROFESSOR_H

#include <QObject>
#include<QtSql>
#include<QString>

class sql_professor : public QObject
{
    Q_OBJECT
public:
    explicit sql_professor(QSqlDatabase db,QObject *parent = 0);

    void propertyset(QString na,QString ag){
        name=na;
        age=ag;
    }

    bool insert();
    QSqlTableModel * gettable(){
        return model;
    }

private:
    QSqlDatabase data;
    QSqlTableModel * model;
    QSqlQuery query;

    QString name;
    QString age;
    
signals:
    
public slots:
    
};

#endif // SQL_PROFESSOR_H
#include "submit_dia.h"
#include "ui_submit_dia.h"
#include<QString>

submit_dia::submit_dia(QWidget *parent) :
    QDialog(parent),
    ui(new Ui::submit_dia)
{
    ui->setupUi(this);
}

submit_dia::~submit_dia()
{
    delete ui;
}
void submit_dia::setdata(QVector<QString> contents){
    ui->label->setText(tr("name is %1").arg(contents[0]));
    ui->label_2->setText(tr("birth is %1").arg(contents[1]));
    ui->label_3->setText(tr("passowrd is %1").arg(contents[2]));
    ui->label_4->setText(tr("priority is %1").arg(contents[3]));
    ui->label_5->setText(tr("type is %1").arg(contents[4]));
    ui->label_6->setText(tr("phone is %1").arg(contents[5]));
    ui->label_7->setText(tr("Email is %1").arg(contents[6]));


}
#ifndef SUBMIT_DIA_H
#define SUBMIT_DIA_H

#include <QDialog>
#include<QVector>

namespace Ui {
class submit_dia;
}

class submit_dia : public QDialog
{
    Q_OBJECT
    
public:
    explicit submit_dia(QWidget *parent = 0);
    ~submit_dia();
    void setdata(QVector<QString> contents);
    
private:
    Ui::submit_dia *ui;
};

#endif // SUBMIT_DIA_H
<?xml version="1.0" encoding="UTF-8"?>
<ui version="4.0">
 <class>submit_dia</class>
 <widget class="QDialog" name="submit_dia">
  <property name="geometry">
   <rect>
    <x>0</x>
    <y>0</y>
    <width>400</width>
    <height>300</height>
   </rect>
  </property>
  <property name="windowTitle">
   <string>Dialog</string>
  </property>
  <layout class="QVBoxLayout" name="verticalLayout_2">
   <item>
    <layout class="QHBoxLayout" name="horizontalLayout">
     <item>
      <spacer name="horizontalSpacer">
       <property name="orientation">
        <enum>Qt::Horizontal</enum>
       </property>
       <property name="sizeHint" stdset="0">
        <size>
         <width>40</width>
         <height>20</height>
        </size>
       </property>
      </spacer>
     </item>
     <item>
      <widget class="QLabel" name="label_8">
       <property name="text">
        <string>Are you sure that you want to add as follows?</string>
       </property>
      </widget>
     </item>
     <item>
      <spacer name="horizontalSpacer_2">
       <property name="orientation">
        <enum>Qt::Horizontal</enum>
       </property>
       <property name="sizeHint" stdset="0">
        <size>
         <width>40</width>
         <height>20</height>
        </size>
       </property>
      </spacer>
     </item>
    </layout>
   </item>
   <item>
    <layout class="QVBoxLayout" name="verticalLayout">
     <item>
      <widget class="QLabel" name="label_7">
       <property name="text">
        <string>Are you sure?</string>
       </property>
      </widget>
     </item>
     <item>
      <widget class="QLabel" name="label">
       <property name="text">
        <string>TextLabel</string>
       </property>
      </widget>
     </item>
     <item>
      <widget class="QLabel" name="label_2">
       <property name="text">
        <string>TextLabel</string>
       </property>
      </widget>
     </item>
     <item>
      <widget class="QLabel" name="label_3">
       <property name="text">
        <string>TextLabel</string>
       </property>
      </widget>
     </item>
     <item>
      <widget class="QLabel" name="label_5">
       <property name="text">
        <string>TextLabel</string>
       </property>
      </widget>
     </item>
     <item>
      <widget class="QLabel" name="label_4">
       <property name="text">
        <string>TextLabel</string>
       </property>
      </widget>
     </item>
     <item>
      <widget class="QLabel" name="label_6">
       <property name="text">
        <string>TextLabel</string>
       </property>
      </widget>
     </item>
    </layout>
   </item>
   <item>
    <widget class="QDialogButtonBox" name="buttonBox">
     <property name="orientation">
      <enum>Qt::Horizontal</enum>
     </property>
     <property name="standardButtons">
      <set>QDialogButtonBox::Cancel|QDialogButtonBox::Ok</set>
     </property>
    </widget>
   </item>
  </layout>
 </widget>
 <resources/>
 <connections>
  <connection>
   <sender>buttonBox</sender>
   <signal>accepted()</signal>
   <receiver>submit_dia</receiver>
   <slot>accept()</slot>
   <hints>
    <hint type="sourcelabel">
     <x>248</x>
     <y>254</y>
    </hint>
    <hint type="destinationlabel">
     <x>157</x>
     <y>274</y>
    </hint>
   </hints>
  </connection>
  <connection>
   <sender>buttonBox</sender>
   <signal>rejected()</signal>
   <receiver>submit_dia</receiver>
   <slot>reject()</slot>
   <hints>
    <hint type="sourcelabel">
     <x>316</x>
     <y>260</y>
    </hint>
    <hint type="destinationlabel">
     <x>286</x>
     <y>274</y>
    </hint>
   </hints>
  </connection>
 </connections>
</ui>
#include "w_login.h"
#include "ui_w_login.h"
#include<QDebug>
#include<QMessageBox>
#include"mysql_establish.h"
#include<QtSql>
#include<QString>
#include<QVector>

W_login::W_login(Mysql_Establish * connect, QString u1, QString u2, QWidget *parent) :
    QDialog(parent),
    ui(new Ui::W_login),
    user(u1),pass(u2)
{
    ui->setupUi(this);
    ui->line_pass->setEchoMode(QLineEdit::Password);
    ui->line_user->setFocus();
    con=connect;
}

W_login::~W_login()
{
   // qDebug()<<user<<pass;
    delete ui;
}

int W_login::priority(QString na, QString pass)
{
    QSqlQuery test(con->data());
    test.exec("select * from person");
    bool flag = 0;
    while(test.next())
    {
        QString name = test.value(0).toString();
        QString password = test.value(2).toString();
        if (name==na&&pass==password)
        {
            flag = 1;
            return test.at();
        }
    }
    if (flag==0)
    {
        return -1;
    }
}
void W_login::on_enterButton_clicked()
{
    user=this->ui->line_user->text().trimmed();
    pass=this->ui->line_pass->text();
    int loc =priority(user,pass);
    if (loc==-1)
    {
         QMessageBox::warning(this,tr("Wrong passer"),
                              tr("some wrong with the input"),QMessageBox::Yes);
                  this->ui->line_pass->clear();
                  this->ui->line_user->clear();
                  this->ui->line_user->setFocus();
    }
     else{
         QSqlQuery reader(con->data());
         reader.exec("select * from person");
         reader.seek(loc);
         int av = reader.value(3).toInt();
         int bv = reader.value(4).toInt();
         emit found(set_pri(av,bv));
         accept();
     }
}
QVector<int> W_login::set_pri(int a,int b){
    //qDebug()<<"yingjie"<<a<<b;
    QVector<int> ap;
    switch (a)
    {
    case 0: ap.append(0);break;
    case 1: ap.append(1);break;
    case 2: ap.append(2);break;
    case 3: ap.append(3);break;
 //   default: ap.append(0);
    }
    switch (b)
    {
    case 0:ap.append(0);break;
    case 1:ap.append(1);break;
    case 2:ap.append(2);break;
    }
    return ap;
}

void W_login::on_pushButton_clicked()
{
    this->close();
}
#ifndef W_LOGIN_H
#define W_LOGIN_H

#include <QDialog>
#include<QString>
#include"mysql_establish.h"
#include<QVector>

namespace Ui {
class W_login;
}

class W_login : public QDialog
{
    Q_OBJECT
    
public:
    explicit W_login(Mysql_Establish * connect,  QString u1=tr("Test"),
                     QString u2=tr("test"),QWidget * parent = 0);
    ~W_login();
    
private slots:
    void on_enterButton_clicked();
    void on_pushButton_clicked();

signals:
    void found(QVector<int> name);

private:
    Ui::W_login *ui;
    QString user;
    QString pass;
    int priority(QString na, QString pass);
    Mysql_Establish * con;
    QVector<int> set_pri(int a, int b);

};

#endif // W_LOGIN_H
<?xml version="1.0" encoding="UTF-8"?>
<ui version="4.0">
 <class>W_login</class>
 <widget class="QDialog" name="W_login">
  <property name="geometry">
   <rect>
    <x>0</x>
    <y>0</y>
    <width>394</width>
    <height>201</height>
   </rect>
  </property>
  <property name="windowTitle">
   <string>Login</string>
  </property>
  <layout class="QVBoxLayout" name="verticalLayout">
   <item>
    <layout class="QHBoxLayout" name="horizontalLayout">
     <item>
      <widget class="QLabel" name="label">
       <property name="text">
        <string>username</string>
       </property>
      </widget>
     </item>
     <item>
      <widget class="QLineEdit" name="line_user">
       <property name="text">
        <string>shuni</string>
       </property>
      </widget>
     </item>
    </layout>
   </item>
   <item>
    <layout class="QHBoxLayout" name="horizontalLayout_2">
     <item>
      <widget class="QLabel" name="label_2">
       <property name="text">
        <string>password</string>
       </property>
      </widget>
     </item>
     <item>
      <widget class="QLineEdit" name="line_pass">
       <property name="text">
        <string>123456</string>
       </property>
      </widget>
     </item>
    </layout>
   </item>
   <item>
    <layout class="QHBoxLayout" name="horizontalLayout_3">
     <item>
      <widget class="QPushButton" name="enterButton">
       <property name="text">
        <string>enter</string>
       </property>
      </widget>
     </item>
     <item>
      <spacer name="horizontalSpacer_2">
       <property name="orientation">
        <enum>Qt::Horizontal</enum>
       </property>
       <property name="sizeHint" stdset="0">
        <size>
         <width>40</width>
         <height>20</height>
        </size>
       </property>
      </spacer>
     </item>
     <item>
      <widget class="QPushButton" name="pushButton">
       <property name="text">
        <string>quit</string>
       </property>
      </widget>
     </item>
    </layout>
   </item>
  </layout>
 </widget>
 <resources/>
 <connections/>
</ui>
#include "yingqlineedit.h"

yingQlineEdit::yingQlineEdit(QWidget *parent) :
    QLineEdit(parent)
{
}
void yingQlineEdit::mousePressEvent(QMouseEvent *event){
    emit clicked();
}
void yingQlineEdit::set_date(QDate date){
    this->setText(date.toString());
}
#ifndef YINGQLINEEDIT_H
#define YINGQLINEEDIT_H

#include <QLineEdit>
#include<QMouseEvent>
#include<QDate>
class yingQlineEdit : public QLineEdit
{
    Q_OBJECT
public:
    explicit yingQlineEdit(QWidget *parent = 0);
    
signals:
   void clicked();
    
public slots:
   void set_date(QDate date);

protected:
   void mousePressEvent(QMouseEvent *event);
    
};

#endif // YINGQLINEEDIT_H
